// Generated by CoffeeScript 1.4.0
(function() {
  var Unit, UnitView;

  Unit = (function() {
    var friends;

    friends = [];

    function Unit() {
      this.lifespan = new Rx.Subject;
      this.isBomb = new Rx.BehaviorSubject(false);
      this.isCovered = new Rx.BehaviorSubject(true);
      this.bombCount = new Rx.BehaviorSubject(0);
    }

    Unit.prototype.addFriend = function(friend) {
      var disposer;
      disposer = new Rx.CompositeDisposable;
      disposer.add(friend.isBomb.skipWhile(function(x) {
        return !x;
      }).select(function(x) {
        if (x) {
          return 1;
        } else {
          return -1;
        }
      }).select(function(x) {
        return unit.bombCount.value + x;
      }).subscribe(unit.bombCount));
      return disposer.add(friend.lifespan.subscribe(function() {}, function() {}, function() {
        return disposer.dispose();
      }));
    };

    return Unit;

  })();

  UnitView = (function() {

    function UnitView(physics, unit) {
      var self;
      self = this;
      this.particle = new Particle(Math.random() * .5 + .5);
      this.disposables = new Rx.CompositeDisposable;
      this.color = {
        r: Math.floor(Math.random() * 256),
        g: Math.floor(Math.random() * 256),
        b: Math.floor(Math.random() * 256)
      };
      console.log(this.color);
      physics.particles.push(this.particle);
    }

    UnitView.prototype.draw = function(ctx, dt) {
      var a, b;
      a = this.particle.pos;
      b = this.particle.oldpos;
      ctx.fillStyle = 'none';
      ctx.strokeStyle = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + ",1)";
      ctx.lineWidth = this.particle.mass * 10;
      ctx.beginPath();
      ctx.moveTo(a.x, a.y);
      ctx.lineTo(b.x, b.y);
      return ctx.stroke();
    };

    UnitView.prototype.dispose = function() {
      this.disposables.dispose();
      return this.circle.remove();
    };

    return UnitView;

  })();

  $(function() {
    var $canvas, $window, a, ctx, docSize, i, last, makeRandomUnit, physics, update, views, _i;
    document.ontouchstart = function(e) {
      return e.preventDefault();
    };
    document.ontouchmove = function(e) {
      return e.preventDefault();
    };
    $window = $(window);
    $canvas = $('canvas');
    docSize = new Rx.BehaviorSubject({
      width: $window.width(),
      height: $window.height()
    });
    a = new Attraction(new Vector(docSize.value.width / 2, docSize.value.height / 2), 100000, 1000);
    $window.onAsObservable('resize').subscribe(function() {
      return docSize.onNext({
        width: $window.width(),
        height: $window.height()
      });
    });
    docSize.subscribe(function(size) {
      a.target = new Vector(size.width / 2, size.height / 2);
      return $canvas.attr({
        'width': size.width,
        'height': size.height
      });
    });
    physics = new Physics;
    $window.onAsObservable('touchstart').doAction(function(e) {
      return e.preventDefault();
    });
    $window.onAsObservable('touchmove').doAction(function(e) {
      return e.preventDefault();
    });
    Rx.Observable.merge($window.onAsObservable('mousemove').select(function(e) {
      return {
        x: e.clientX,
        y: e.clientY
      };
    }), $window.onAsObservable('touchmove').select(function(e) {
      return {
        x: e.originalEvent.touches[0].clientX,
        y: e.originalEvent.touches[0].clientY
      };
    }), $window.onAsObservable('touchstart').select(function(e) {
      return {
        x: e.originalEvent.touches[0].clientX,
        y: e.originalEvent.touches[0].clientY
      };
    })).subscribe(function(pos) {
      return a.target = new Vector(pos.x, pos.y);
    });
    views = [];
    makeRandomUnit = function() {
      var unit, view, x, y;
      x = Math.random() * docSize.value.width;
      y = Math.random() * docSize.value.height;
      unit = new Unit();
      view = new UnitView(physics, unit);
      view.particle.pos = new Vector(x, y);
      view.particle.old.pos = new Vector(x, y);
      view.particle.oldpos = new Vector(x, y);
      view.particle.vel = new Vector(Math.random() * 1000 - 500, Math.random() * 1000 - 500);
      views.push(view);
      return view.particle.behaviours.push(a);
    };
    for (i = _i = 0; _i < 250; i = ++_i) {
      makeRandomUnit();
    }
    last = 0;
    ctx = $('canvas')[0].getContext('2d');
    update = function(timestamp) {
      var dt, ms, s, size, view, _j, _len;
      if (timestamp === void 0) {
        requestAnimationFrame(update);
        return;
      }
      if (last === 0 && timestamp !== void 0) {
        last = timestamp;
        requestAnimationFrame(update);
        return;
      }
      ms = timestamp - last;
      dt = ms / 1000;
      last = timestamp;
      physics.step();
      requestAnimationFrame(update);
      ctx.fillStyle = "rgba(0,0,0,0.1)";
      ctx.strokeStyle = "none";
      ctx.globalCompositeOperation = 'source-over';
      ctx.fillRect(0, 0, docSize.value.width, docSize.value.height);
      ctx.globalCompositeOperation = 'lighter';
      for (_j = 0, _len = views.length; _j < _len; _j++) {
        view = views[_j];
        view.draw(ctx, dt);
        view.particle.oldpos = new Vector(view.particle.pos.x, view.particle.pos.y);
      }
      ctx.fillStyle = 'rgba(255,255,255,0.25)';
      ctx.font = '30px sans-serif';
      s = 'cwharris.com';
      size = ctx.measureText(s);
      ctx.fillText(s, (docSize.value.width - size.width) / 2, (docSize.value.height / 2) - 100);
      return ctx.fill();
    };
    return update();
  });

}).call(this);
